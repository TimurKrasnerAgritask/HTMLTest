"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_agritask_vue_components"] = self["webpackChunk_agritask_vue_components"] || []).push([["vendors-node_modules_agritask_js-utils_libs_input_validation_utils_js-node_modules_agritask_j-aad506"],{

/***/ "./node_modules/@agritask/js-utils/libs/guards.js":
/*!********************************************************!*\
  !*** ./node_modules/@agritask/js-utils/libs/guards.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertArray: () => (/* binding */ assertArray),\n/* harmony export */   assertNoNNullObject: () => (/* binding */ assertNoNNullObject),\n/* harmony export */   assertRegEx: () => (/* binding */ assertRegEx),\n/* harmony export */   assertType: () => (/* binding */ assertType),\n/* harmony export */   isNoNNullObject: () => (/* binding */ isNoNNullObject)\n/* harmony export */ });\nfunction assertRegEx(value) {\n    if (value instanceof RegExp === false) {\n        throw `${value} is not regex. it's type of ${typeof value}`;\n    }\n}\nfunction assertType(value, type) {\n    if (typeof value !== type) {\n        throw `${value} is not ${type}. it's type of ${typeof value}`;\n    }\n}\nfunction assertArray(value) {\n    if (!Array.isArray(value)) {\n        throw `${value} is not an array. it's type of ${typeof value}`;\n    }\n}\nfunction assertNoNNullObject(value) {\n    if (!isNoNNullObject(value)) {\n        throw `${value} is not an Object. it's type of ${typeof value}`;\n    }\n}\nfunction isNoNNullObject(value) {\n    if (value === null || typeof value !== 'object') {\n        return false;\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFncml0YXNrL2pzLXV0aWxzL2xpYnMvZ3VhcmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTztBQUNQO0FBQ0EsaUJBQWlCLE9BQU8sNkJBQTZCLGFBQWE7QUFDbEU7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsT0FBTyxTQUFTLEtBQUssaUJBQWlCLGFBQWE7QUFDcEU7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsT0FBTyxnQ0FBZ0MsYUFBYTtBQUNyRTtBQUNBO0FBQ087QUFDUDtBQUNBLGlCQUFpQixPQUFPLGlDQUFpQyxhQUFhO0FBQ3RFO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWdyaXRhc2svdnVlLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvQGFncml0YXNrL2pzLXV0aWxzL2xpYnMvZ3VhcmRzLmpzP2RhMjUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFJlZ0V4KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBgJHt2YWx1ZX0gaXMgbm90IHJlZ2V4LiBpdCdzIHR5cGUgb2YgJHt0eXBlb2YgdmFsdWV9YDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IHR5cGUpIHtcbiAgICAgICAgdGhyb3cgYCR7dmFsdWV9IGlzIG5vdCAke3R5cGV9LiBpdCdzIHR5cGUgb2YgJHt0eXBlb2YgdmFsdWV9YDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0QXJyYXkodmFsdWUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHRocm93IGAke3ZhbHVlfSBpcyBub3QgYW4gYXJyYXkuIGl0J3MgdHlwZSBvZiAke3R5cGVvZiB2YWx1ZX1gO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROb05OdWxsT2JqZWN0KHZhbHVlKSB7XG4gICAgaWYgKCFpc05vTk51bGxPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRocm93IGAke3ZhbHVlfSBpcyBub3QgYW4gT2JqZWN0LiBpdCdzIHR5cGUgb2YgJHt0eXBlb2YgdmFsdWV9YDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb05OdWxsT2JqZWN0KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@agritask/js-utils/libs/guards.js\n");

/***/ }),

/***/ "./node_modules/@agritask/js-utils/libs/input_validation/utils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@agritask/js-utils/libs/input_validation/utils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertObjectOfVlads: () => (/* binding */ assertObjectOfVlads),\n/* harmony export */   getSize: () => (/* binding */ getSize),\n/* harmony export */   getType: () => (/* binding */ getType),\n/* harmony export */   isInputValidationContinues: () => (/* binding */ isInputValidationContinues),\n/* harmony export */   isObjectOfVlads: () => (/* binding */ isObjectOfVlads),\n/* harmony export */   isVlad: () => (/* binding */ isVlad)\n/* harmony export */ });\n/* unused harmony exports assertVlad, isVladSerial */\n/* harmony import */ var _guards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards */ \"./node_modules/@agritask/js-utils/libs/guards.js\");\n/* harmony import */ var _vlad__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vlad */ \"./node_modules/@agritask/js-utils/libs/input_validation/vlad.js\");\n\n\nconst getSize = (value) => {\n    switch (typeof value) {\n        case 'number':\n            if (Number.isNaN(value)) {\n                return 0;\n            }\n            return value;\n        case 'string':\n            return value.length;\n        case 'object':\n            if (value === undefined || value === null) {\n                return 0;\n            }\n            return Array.isArray(value) ? value.length : Object.keys(value).length;\n        case 'bigint':\n            return Number(value);\n        case 'function':\n            return getSize(value());\n    }\n    return 0;\n};\nconst getType = (value) => {\n    if (Array.isArray(value)) {\n        return 'array';\n    }\n    return typeof value;\n};\n// ************** typescript type assertion (and gate keeping) *****************\nfunction assertVlad(value) {\n    if (!isVlad(value)) {\n        throw `${value} is not an InputValidationRules. it's type of ${typeof value}`;\n    }\n}\nfunction isVlad(value) {\n    return typeof value === 'object' && value !== null && _vlad__WEBPACK_IMPORTED_MODULE_1__.IS_VLAD in value;\n}\nfunction isObjectOfVlads(value, allowEmpty = true) {\n    if ((0,_guards__WEBPACK_IMPORTED_MODULE_0__.isNoNNullObject)(value)) {\n        const values = Object.values(value);\n        if (values.length === 0 && !allowEmpty) {\n            return false;\n        }\n        for (let i = 0; i < values.length; i++) {\n            if (!isVlad(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nfunction assertObjectOfVlads(value) {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_0__.assertNoNNullObject)(value);\n    const values = Object.values(value);\n    for (let i = 0; i < values.length; i++) {\n        assertVlad(values[i]);\n    }\n}\nfunction isVladSerial(value) {\n    if ((0,_guards__WEBPACK_IMPORTED_MODULE_0__.isNoNNullObject)(value) && 'key' in value && 'args' in value) {\n        return true;\n    }\n    return false;\n}\nfunction isInputValidationContinues(value) {\n    if (typeof value === 'function' && typeof value.validateAll === 'function') {\n        return true;\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFncml0YXNrL2pzLXV0aWxzL2xpYnMvaW5wdXRfdmFsaWRhdGlvbi91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFpRTtBQUNoQztBQUMxQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSxpQkFBaUIsT0FBTywrQ0FBK0MsYUFBYTtBQUNwRjtBQUNBO0FBQ087QUFDUCwwREFBMEQsMENBQU87QUFDakU7QUFDTztBQUNQLFFBQVEsd0RBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLElBQUksNERBQW1CO0FBQ3ZCO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDTztBQUNQLFFBQVEsd0RBQWU7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWdyaXRhc2svdnVlLWNvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvQGFncml0YXNrL2pzLXV0aWxzL2xpYnMvaW5wdXRfdmFsaWRhdGlvbi91dGlscy5qcz9iNmYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9OTnVsbE9iamVjdCwgYXNzZXJ0Tm9OTnVsbE9iamVjdCB9IGZyb20gJy4uL2d1YXJkcyc7XG5pbXBvcnQgeyBJU19WTEFEIH0gZnJvbSAnLi92bGFkJztcbmV4cG9ydCBjb25zdCBnZXRTaXplID0gKHZhbHVlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoO1xuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmxlbmd0aCA6IE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGg7XG4gICAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgcmV0dXJuIGdldFNpemUodmFsdWUoKSk7XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcbmV4cG9ydCBjb25zdCBnZXRUeXBlID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlO1xufTtcbi8vICoqKioqKioqKioqKioqIHR5cGVzY3JpcHQgdHlwZSBhc3NlcnRpb24gKGFuZCBnYXRlIGtlZXBpbmcpICoqKioqKioqKioqKioqKioqXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmxhZCh2YWx1ZSkge1xuICAgIGlmICghaXNWbGFkKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBgJHt2YWx1ZX0gaXMgbm90IGFuIElucHV0VmFsaWRhdGlvblJ1bGVzLiBpdCdzIHR5cGUgb2YgJHt0eXBlb2YgdmFsdWV9YDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWbGFkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgSVNfVkxBRCBpbiB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdE9mVmxhZHModmFsdWUsIGFsbG93RW1wdHkgPSB0cnVlKSB7XG4gICAgaWYgKGlzTm9OTnVsbE9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh2YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAwICYmICFhbGxvd0VtcHR5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghaXNWbGFkKHZhbHVlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRPYmplY3RPZlZsYWRzKHZhbHVlKSB7XG4gICAgYXNzZXJ0Tm9OTnVsbE9iamVjdCh2YWx1ZSk7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyh2YWx1ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXNzZXJ0VmxhZCh2YWx1ZXNbaV0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZsYWRTZXJpYWwodmFsdWUpIHtcbiAgICBpZiAoaXNOb05OdWxsT2JqZWN0KHZhbHVlKSAmJiAna2V5JyBpbiB2YWx1ZSAmJiAnYXJncycgaW4gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0VmFsaWRhdGlvbkNvbnRpbnVlcyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLnZhbGlkYXRlQWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@agritask/js-utils/libs/input_validation/utils.js\n");

/***/ }),

/***/ "./node_modules/@agritask/js-utils/libs/input_validation/validator_toBe.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@agritask/js-utils/libs/input_validation/validator_toBe.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBeValidation: () => (/* binding */ toBeValidation)\n/* harmony export */ });\nconst toBeValidation = (expected) => {\n    const func = (value) => {\n        if (expected !== value) {\n            return {\n                type: 'toBe',\n                context: { value, expected },\n            };\n        }\n        return true;\n    };\n    func.serialize = () => ({\n        key: 'toBe',\n        args: [expected],\n    });\n    return func;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGFncml0YXNrL2pzLXV0aWxzL2xpYnMvaW5wdXRfdmFsaWRhdGlvbi92YWxpZGF0b3JfdG9CZS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFncml0YXNrL3Z1ZS1jb21wb25lbnRzLy4vbm9kZV9tb2R1bGVzL0BhZ3JpdGFzay9qcy11dGlscy9saWJzL2lucHV0X3ZhbGlkYXRpb24vdmFsaWRhdG9yX3RvQmUuanM/M2RkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdG9CZVZhbGlkYXRpb24gPSAoZXhwZWN0ZWQpID0+IHtcbiAgICBjb25zdCBmdW5jID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChleHBlY3RlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RvQmUnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHsgdmFsdWUsIGV4cGVjdGVkIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgZnVuYy5zZXJpYWxpemUgPSAoKSA9PiAoe1xuICAgICAgICBrZXk6ICd0b0JlJyxcbiAgICAgICAgYXJnczogW2V4cGVjdGVkXSxcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuYztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@agritask/js-utils/libs/input_validation/validator_toBe.js\n");

/***/ }),

/***/ "./node_modules/@agritask/js-utils/libs/input_validation/validators.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@agritask/js-utils/libs/input_validation/validators.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rulesMap: () => (/* binding */ rulesMap)\n/* harmony export */ });\n/* unused harmony exports requiredValidation, sameAsValidation, objectValidation, alternativesValidation, regexValidation, emailValidation, typeValidate, stringValidation, numberValidation, arrayValidation, minValidation, maxValidation, optionsValidation */\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./node_modules/@agritask/js-utils/libs/input_validation/utils.js\");\n/* harmony import */ var _guards__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../guards */ \"./node_modules/@agritask/js-utils/libs/guards.js\");\n/* harmony import */ var _vlad__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vlad */ \"./node_modules/@agritask/js-utils/libs/input_validation/vlad.js\");\n/* harmony import */ var _validator_toBe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validator_toBe */ \"./node_modules/@agritask/js-utils/libs/input_validation/validator_toBe.js\");\n\n\n\n\nconst requiredValidation = () => {\n    const func = (value) => {\n        const isNothing = value === undefined || value === null || Number.isNaN(value);\n        if (isNothing || ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getSize)(value) === 0 && typeof value !== 'number')) {\n            return { type: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getType)(value) + '.required', context: { value } };\n        }\n        return true;\n    };\n    func.serialize = () => ({\n        key: 'required',\n        args: [],\n    });\n    return func;\n};\nconst sameAsValidation = (foreignKey) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertType)(foreignKey, 'string');\n    const func = (value, context) => {\n        const otherValue = context[foreignKey];\n        if (!otherValue) {\n            return { type: 'same.missing', context: { value, foreignKey } };\n        }\n        return otherValue === value\n            ? true\n            : { type: 'same', context: { value, other: otherValue, foreignKey } };\n    };\n    func.serialize = () => ({\n        key: 'same',\n        args: [foreignKey],\n    });\n    return func;\n};\nconst objectValidation = (rulesByKeys) => {\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isObjectOfVlads)(rulesByKeys)) {\n        // values are not Vlads - probably serialized Vlad (?)\n        const vladSerialMap = rulesByKeys;\n        for (const key in vladSerialMap) {\n            rulesByKeys[key] = _vlad__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deserialize(vladSerialMap[key]);\n        }\n    }\n    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.assertObjectOfVlads)(rulesByKeys);\n    const validateValue = (value, stopOfFirstInvaid) => {\n        try {\n            (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertNoNNullObject)(value);\n        }\n        catch {\n            const requiredResult = {\n                type: 'required',\n                context: { value },\n            };\n            return stopOfFirstInvaid ? requiredResult : [requiredResult];\n        }\n        const ruleKeys = Object.keys(rulesByKeys);\n        const invalids = [];\n        for (let i = 0; i < ruleKeys.length; i++) {\n            const key = ruleKeys[i];\n            const validationFunc = rulesByKeys[key];\n            const result = validationFunc.validate(value[key], value);\n            if (result !== true) {\n                result.context.key = key;\n                if (stopOfFirstInvaid) {\n                    return result;\n                }\n                else {\n                    invalids.push(result);\n                }\n            }\n        }\n        if (invalids.length) {\n            return invalids;\n        }\n        return true;\n    };\n    const func = (value) => {\n        const result = validateValue(value, true);\n        return Array.isArray(result) ? result[0] : result;\n    };\n    func.validateAll = (value) => {\n        return validateValue(value, false);\n    };\n    func.serialize = () => {\n        const serializedRules = {};\n        for (const key in rulesByKeys) {\n            serializedRules[key] = rulesByKeys[key].serialize();\n        }\n        return {\n            key: 'object',\n            args: [serializedRules],\n        };\n    };\n    return func;\n};\nconst alternativesValidation = (rules) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertArray)(rules);\n    let inputValidationRules;\n    if (!(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isVlad)(rules[0])) {\n        // rules array array - must be a serialized InputValidationRules -> derialize them\n        inputValidationRules = rules.map((serializedRule) => _vlad__WEBPACK_IMPORTED_MODULE_2__[\"default\"].deserialize(serializedRule));\n    }\n    else {\n        inputValidationRules = rules;\n    }\n    let lastFail = true;\n    const func = (value, context) => {\n        for (let i = 0; i < inputValidationRules.length; i++) {\n            const inputValidation = inputValidationRules[i];\n            lastFail = inputValidation.validate(value, context);\n            if (lastFail === true) {\n                return lastFail;\n            }\n        }\n        return lastFail;\n    };\n    func.serialize = () => ({\n        key: 'alternatives',\n        args: inputValidationRules.map((func) => func.serialize()),\n    });\n    return func;\n};\nconst regexValidation = (regex, type = 'string') => {\n    if (typeof regex === 'string') {\n        const parts = regex.match(/\\/(.*)\\/(.*)?/);\n        if (parts) {\n            regex = new RegExp(parts[1], parts[2] || '');\n        }\n        else {\n            console.error(`failed to parse string ${regex} to regexp`);\n        }\n    }\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertRegEx)(regex);\n    const func = (value, _) => {\n        if (value === null || value === undefined) {\n            return { type: 'required', context: { value } };\n        }\n        if (typeof value !== 'string') {\n            return { type: type + '.format', context: { value } };\n        }\n        if (value.length === 0) {\n            return { type: 'required', context: { value } };\n        }\n        const result = regex.test(value);\n        if (result) {\n            return true;\n        }\n        return { type: type + '.format', context: { value } };\n    };\n    func.serialize = () => ({\n        key: 'regex',\n        args: [regex.toString(), type],\n    });\n    return func;\n};\nconst emailValidation = () => {\n    const reg = /^(([^<>()[\\]\\\\.,;:\\s@!\"]+(\\.[^<>()[\\]\\\\.,;:\\s@!\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([_a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n    const validation = regexValidation(reg, 'email');\n    validation.serialize = () => ({\n        key: 'email',\n        args: [],\n    });\n    return validation;\n};\nconst typeValidate = (type) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertType)(type, 'string');\n    const func = (value) => {\n        if (typeof type !== 'string') {\n            throw `${type} must be a string. but it's '${typeof type}'`;\n        }\n        const t = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getType)(value);\n        if (t === type || (type === 'number' && t === 'string' && !Number.isNaN(+value))) {\n            return true;\n        }\n        return { type: type + '.format', context: { value } };\n    };\n    func.serialize = () => ({\n        key: 'type',\n        args: [type],\n    });\n    return func;\n};\nconst stringValidation = () => {\n    const validation = typeValidate('string');\n    validation.serialize = () => ({\n        key: 'string',\n        args: [],\n    });\n    return validation;\n};\nconst numberValidation = () => {\n    const validation = typeValidate('number');\n    validation.serialize = () => ({\n        key: 'number',\n        args: [],\n    });\n    return validation;\n};\nconst arrayValidation = () => {\n    const validation = typeValidate('array');\n    validation.serialize = () => ({\n        key: 'array',\n        args: [],\n    });\n    return validation;\n};\nconst minValidation = (min) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertType)(min, 'number');\n    const func = (value) => {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getSize)(value) < min) {\n            return {\n                type: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getType)(value) + '.min',\n                context: { value, limit: min },\n            };\n        }\n        return true;\n    };\n    func.serialize = () => ({\n        key: 'min',\n        args: [min],\n    });\n    return func;\n};\nconst maxValidation = (max) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertType)(max, 'number');\n    const func = (value, _) => {\n        if ((0,_utils__WEBPACK_IMPORTED_MODULE_0__.getSize)(value) > max) {\n            return {\n                type: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getType)(value) + '.max',\n                context: { value, limit: max },\n            };\n        }\n        return true;\n    };\n    func.serialize = () => ({\n        key: 'max',\n        args: [max],\n    });\n    return func;\n};\nconst optionsValidation = (options) => {\n    (0,_guards__WEBPACK_IMPORTED_MODULE_1__.assertArray)(options);\n    const func = (value, _) => {\n        const acceptedTypes = ['string', 'number', 'boolean'];\n        const validateInOptions = (value) => {\n            if (!acceptedTypes.includes(typeof value)) {\n                return {\n                    type: 'options.format',\n                    context: { value },\n                };\n            }\n            if (options.includes(value)) {\n                return true;\n            }\n            return {\n                type: 'options',\n                context: { value, options },\n            };\n        };\n        if (Array.isArray(value)) {\n            // value is an array - validate each item in the array is in the options\n            for (const val of value) {\n                const result = validateInOptions(val);\n                if (result !== true) {\n                    return result;\n                }\n            }\n            return true;\n        }\n        else {\n            // validate value is in the array\n            return validateInOptions(value);\n        }\n    };\n    func.serialize = () => ({\n        key: 'options',\n        args: [options],\n    });\n    return func;\n};\nconst rulesMap = new Map([\n    ['required', requiredValidation],\n    ['array', arrayValidation],\n    ['object', objectValidation],\n    ['email', emailValidation],\n    ['max', maxValidation],\n    ['min', minValidation],\n    ['number', numberValidation],\n    ['regex', regexValidation],\n    ['string', stringValidation],\n    ['type', typeValidate],\n    ['alternatives', alternativesValidation],\n    ['same', sameAsValidation],\n    ['options', optionsValidation],\n    ['toBe', _validator_toBe__WEBPACK_IMPORTED_MODULE_3__.toBeValidation],\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@agritask/js-utils/libs/input_validation/validators.js\n");

/***/ }),

/***/ "./node_modules/@agritask/js-utils/libs/input_validation/vlad.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@agritask/js-utils/libs/input_validation/vlad.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_VLAD: () => (/* binding */ IS_VLAD),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony exports addRule, createInputValidationRules, Vlad */\n/* harmony import */ var _guards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../guards */ \"./node_modules/@agritask/js-utils/libs/guards.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./node_modules/@agritask/js-utils/libs/input_validation/utils.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validators */ \"./node_modules/@agritask/js-utils/libs/input_validation/validators.js\");\n\n\n\nconst IS_VLAD = Symbol.for('IS_VLAD');\n/**\n * Add a new input validation to the global available validation function\n * @param key\n * @param validation\n * @param overrideExisting\n * @returns\n */\nconst addRule = (key, validation, overrideExisting = false) => {\n    const exists = _validators__WEBPACK_IMPORTED_MODULE_2__.rulesMap.has(key);\n    if (!exists || overrideExisting) {\n        _validators__WEBPACK_IMPORTED_MODULE_2__.rulesMap.set(key, validation);\n        return true;\n    }\n    return false;\n};\n/**\n * Creates a new InputValidationRules (aka Vlad).\n * Notice under the hood, it is a JS Proxy - for more details about Proxy see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n * @returns Create a new InputValidationRules\n */\nconst createInputValidationRules = () => {\n    // list of InputValidations to validate\n    const validations = [];\n    let isRequired = false;\n    let castStringToNumber = false;\n    const whenConditions = {};\n    const rulesHandler = {\n        get: (target, key, receiver) => {\n            const defaultTargetMember = target[key];\n            // validate a value and find ALL the invalidations and won't stop at the first failed rule lie 'validate' function\n            const validateAll = (value, context) => {\n                const result = doValidation(value, context);\n                if (result === true) {\n                    return true;\n                }\n                if (Array.isArray(result)) {\n                    return result;\n                }\n                return [result];\n            };\n            // validate a value\n            const validate = (value, context) => {\n                const result = doValidation(value, context);\n                return Array.isArray(result) ? result[0] : result;\n            };\n            const doValidation = (value, context, stopOfFirstInvaid = true) => {\n                // check if has 'when' rules and context, if there are non or they fail passing - skip validating this value\n                const whenEntries = Object.entries(whenConditions);\n                if (context && whenEntries.length) {\n                    for (const [whenKey, whenRule] of whenEntries) {\n                        const whenResult = whenRule.validate(context[whenKey], context);\n                        if (whenResult !== true) {\n                            return true;\n                        }\n                    }\n                }\n                if (castStringToNumber && typeof value === 'string') {\n                    if (value.trim() === '') {\n                        value = Number.NaN;\n                    }\n                    else {\n                        const numericValue = +value;\n                        value = !Number.isNaN(numericValue) ? numericValue : value;\n                    }\n                }\n                const isNothing = value === undefined || value === null || Number.isNaN(value);\n                if (isNothing || ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.getSize)(value) === 0 && typeof value !== 'number')) {\n                    if (isRequired) {\n                        const fail = { type: 'required', context: { value } };\n                        if (stopOfFirstInvaid) {\n                            return fail;\n                        }\n                        return [fail];\n                    }\n                    return true;\n                }\n                const invalids = [];\n                for (let i = 0; i < validations.length; i++) {\n                    const validation = validations[i];\n                    let result;\n                    if (stopOfFirstInvaid && (0,_utils__WEBPACK_IMPORTED_MODULE_1__.isInputValidationContinues)(validation)) {\n                        result = validation.validateAll(value, context);\n                    }\n                    else {\n                        result = validation(value, context);\n                    }\n                    if (result !== true) {\n                        if (stopOfFirstInvaid) {\n                            Array.isArray(result)\n                                ? invalids.push(...result)\n                                : invalids.push(result);\n                        }\n                        else {\n                            return result;\n                        }\n                    }\n                }\n                if (invalids.length > 0) {\n                    return invalids;\n                }\n                return true;\n            };\n            // callback to add a custom InputValidation function\n            const addCustomValidation = (validationFunc) => {\n                (0,_guards__WEBPACK_IMPORTED_MODULE_0__.assertType)(validationFunc, 'function');\n                validations.push(validationFunc);\n            };\n            // add new predefined global validation - or fallback to target[key]\n            const attempToAddGlobalValidation = () => {\n                const validationFuncCreator = _validators__WEBPACK_IMPORTED_MODULE_2__.rulesMap.get(key);\n                if (validationFuncCreator) {\n                    const addValidation = (...args) => {\n                        switch (key) {\n                            case 'required':\n                                isRequired = true;\n                                break;\n                            case 'number':\n                                castStringToNumber = true;\n                                break;\n                        }\n                        const validationFunc = validationFuncCreator(...args);\n                        validations.push(validationFunc);\n                        return receiver;\n                    };\n                    return addValidation;\n                }\n                return null;\n            };\n            // pipe key to target[key]\n            const pipeKeyToTarget = () => {\n                // default resolving get\n                if (defaultTargetMember) {\n                    return target[key];\n                }\n                else if (typeof key === 'symbol') {\n                    if (key === Symbol.toPrimitive) {\n                        // Proxy functionality - Support for low level JS functionality of coverting the object to a primitive (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive)\n                        return (hint) => {\n                            switch (hint) {\n                                case 'string':\n                                    return '[Vlad]';\n                                case 'number':\n                                    return Number.NaN;\n                            }\n                            return null;\n                        };\n                    }\n                    return target[key];\n                }\n                else if (typeof key === 'string') {\n                    if (key === 'length') {\n                        // handle members that are not validation functions\n                        return 0;\n                    }\n                    // handle Symbols that are not IS_VLAD\n                    if (key.startsWith('__v_')) {\n                        // Vue injected properties - return Proxy's target's value\n                        return target[key];\n                    }\n                    else {\n                        throw `createInputValidationRule().${key} doesn't exists`;\n                    }\n                }\n                return target;\n                //return receiver; // leaving it in case for unseen issues with 'return target'\n            };\n            // add 'when' rules to define conditions for this rule to check the value\n            const when = (key, rule) => {\n                rule ? (whenConditions[key] = rule) : delete whenConditions[key];\n                return receiver;\n            };\n            switch (key) {\n                case 'validate':\n                    return validate;\n                case 'validateAll':\n                    return validateAll;\n                case 'when':\n                    return when;\n                case 'add':\n                    return addCustomValidation;\n                case 'toJSON':\n                case 'serialize':\n                    return () => {\n                        const serializedVlads = validations.map((v) => v.serialize());\n                        // serialize 'when' on the first serialized vlads\n                        const whenEntries = Object.entries(whenConditions);\n                        if (whenEntries.length && serializedVlads.length) {\n                            serializedVlads[0].when = whenEntries.reduce((acc, [key, vlad]) => {\n                                acc[key] = vlad.serialize();\n                                return acc;\n                            }, {});\n                        }\n                        return serializedVlads;\n                    };\n                default:\n                    return attempToAddGlobalValidation() || pipeKeyToTarget();\n            }\n        },\n    };\n    const validateField = {\n        getLength: () => validations.length,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        add: (validation) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        validate: (value, context) => true,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        validateAll: (value, context, ...args) => true,\n        required: () => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        type: (type) => validateField,\n        number: () => validateField,\n        string: () => validateField,\n        array: () => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        object: (ruleByKeys) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        max: (max) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        min: (min) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        regex: (regEx) => validateField,\n        email: () => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        toBe: (value) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        alternatives: (rules) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        same: (foreignKey) => validateField,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        options: (options) => validateField,\n        serialize: () => [],\n        toJSON: () => [],\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        when: (key, rules) => validateField,\n        [IS_VLAD]: true,\n    };\n    const inputValidationRule = new Proxy(validateField, rulesHandler);\n    return inputValidationRule;\n};\n//export const Vlad = createInputValidationRules;\nconst Vlad = {\n    any: () => createInputValidationRules(),\n    string: () => createInputValidationRules().string(),\n    number: () => createInputValidationRules().number(),\n    array: () => createInputValidationRules().array(),\n    object: (ruleByKeys) => createInputValidationRules().object(ruleByKeys),\n    alternatives: (rules) => createInputValidationRules().alternatives(rules),\n    deserialize: (serial) => {\n        if (typeof serial === 'string') {\n            serial = JSON.parse(serial);\n        }\n        const rules = createInputValidationRules();\n        if (Array.isArray(serial)) {\n            if (serial[0] && serial[0].when) {\n                const whenEntries = Object.entries(serial[0].when);\n                for (const [key, vladSerials] of whenEntries) {\n                    rules.when(key, Vlad.deserialize(vladSerials));\n                }\n            }\n            for (let i = 0; i < serial.length; i++) {\n                if (serial[i].key === 'alternatives') {\n                    // 'alternatives' validation accepts an array as the only arg and the arg should not be spread\n                    rules[serial[i].key](serial[i].args);\n                }\n                else {\n                    rules[serial[i].key](...serial[i].args);\n                }\n            }\n        }\n        return rules;\n    },\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Vlad);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@agritask/js-utils/libs/input_validation/vlad.js\n");

/***/ })

}]);